package automount

import (
	"bufio"
	"bytes"
	"fmt"
	"os"
	goexec "os/exec"
	"os/signal"
	"path"
	"sync/atomic"
	"syscall"

	// "github.com/gman0/dummy-autofuse-csi/internal/dummy/env"
	"github.com/gman0/dummy-autofuse-csi/internal/exec"
	"github.com/gman0/dummy-autofuse-csi/internal/log"
)

type Opts struct {
	// Number of seconds of idle time after which an autofs-managed dummy-fuse
	// mount will be unmounted. Zero means never unmount.
	UnmountTimeoutSeconds int
}

func cvmfsVersion() (string, error) {
	out, err := exec.CombinedOutput(goexec.Command("dummy-fuse", "--version"))
	if err != nil {
		return "", fmt.Errorf("failed to get dummy-fuse version: %v", err)
	}

	return string(bytes.TrimSpace(out)), nil
}

func removeDirContents(dirName string) error {
	contents, err := os.ReadDir(dirName)
	if err != nil {
		// Ignore ENOENT.
		if os.IsNotExist(err) {
			return nil
		}

		return err
	}

	for i := range contents {
		if err = os.RemoveAll(path.Join(dirName, contents[i].Name())); err != nil {
			return err
		}
	}

	return nil
}

func setupAutofs(o *Opts) error {
	writeFmtFile := func(filepath, format string, fmtValues ...any) error {
		if err := os.WriteFile(filepath, []byte(fmt.Sprintf(format, fmtValues...)), 0644); err != nil {
			return fmt.Errorf("failed to write autofs configuration to %s: %v", filepath, err)
		}
		return nil
	}

	if err := writeFmtFile(
		"/etc/autofs.conf",
		`# Generated by automount-runner for dummy-autofuse-csi.
[ autofs ]
timeout = %d
browse_mode = no
`,
		o.UnmountTimeoutSeconds,
	); err != nil {
		return err
	}

	if err := writeFmtFile(
		"/etc/auto.master",
		`# Generated by automount-runner for dummy-autofuse-csi.
/dummy /etc/auto.dummy-fuse
`,
	); err != nil {
		return err
	}

	return nil
}

func Init(o *Opts) error {
	ver, err := cvmfsVersion()
	if err != nil {
		return err
	}

	log.Infof("%s", ver)

	if err := setupAutofs(o); err != nil {
		return err
	}

	return nil
}

func RunBlocking() error {
	args := []string{
		"--foreground",
		"--verbose",
		"--debug",
		"-x",
	}

	isAutofs, err := IsAutofs("/dummy")
	if err != nil {
		log.Fatalf("Failed to stat /dummy: %v", err)
	}

	if isAutofs {
		log.Infof("autofs already mounted in /dummy, automount daemon will reconnect...")
	} else {
		log.Infof("autofs not mounted in /dummy, automount daemon will mount it now...")
	}

	if log.LevelEnabled(log.LevelTrace) {
		// automount passes -O options to the underlying fs mounts.
		args = append(args, "-O", "debug", "--debug")
	}

	cmd := goexec.Command("automount", args...)

	// Set-up piping output for stdout and stderr to driver's logging.

	outp, err := cmd.StdoutPipe()
	if err != nil {
		return err
	}
	cmd.Stderr = cmd.Stdout

	// Run automount.

	scanner := bufio.NewScanner(outp)
	scanner.Split(bufio.ScanLines)

	go func() {
		for scanner.Scan() {
			log.Infof("automount[%d]: %s", cmd.Process.Pid, scanner.Text())
		}
	}()

	// Catch SIGTERM and SIGKILL and forward it to the automount process.

	// autofsTryCleanAtExit := env.GetAutofsTryCleanAtExit()

	sigCh := make(chan os.Signal, 2)
	defer close(sigCh)

	var exitedWithSigTerm atomic.Bool

	go func() {
		for {
			sig, more := <-sigCh
			if !more {
				break
			}

			/*
				if !autofsTryCleanAtExit && sig == syscall.SIGTERM {
					// automount daemon unmounts the autofs root in /dummy upon
					// receiving SIGTERM. This makes it impossible to reconnect
					// the daemon to the mount later, so all consumer Pods will
					// loose their mounts dummy-fuse, without the possibility of
					// restoring them (unless these Pods are restarted too). The
					// implication is that the nodeplugin is just being restarted,
					// and will be needed again.
					//
					// SIGKILL is handled differently in automount, as this forces
					// the daemon to skip the cleanup at exit, leaving the autofs
					// mount behind and making it possible to reconnect to it later.
					// We make a use of this, and unless the admin doesn't explicitly
					// ask for cleanup with AUTOFS_TRY_CLEAN_AT_EXIT env var, no cleanup
					// is done.
					//
					// Also, we intentionally don't unmount the existing autofs-managed
					// mounts inside /dummy, so that any existing consumers receive ENOTCONN
					// (due to broken FUSE mounts), so that accidental `mkdir -p` won't
					// succeed. They are cleaned by the daemon on startup.
					//
					// TODO: remove this once the automount daemon supports skipping
					//       cleanup (via a command line flag).

					log.Debugf("Sending SIGKILL to automount daemon")

					exitedWithSigTerm.Store(true)
					cmd.Process.Signal(syscall.SIGKILL)
					break
				}
			*/

			cmd.Process.Signal(sig)
		}
	}()

	shutdownSignals := []os.Signal{
		syscall.SIGINT,
		syscall.SIGTERM,
		syscall.SIGKILL,
	}

	signal.Notify(sigCh, shutdownSignals...)

	// Start automount daemon.

	log.Infof("Starting automount daemon prog=%s args=%v", cmd.Path, cmd.Args)
	if err := cmd.Start(); err != nil {
		return err
	}
	log.Infof("Started automount daemon PID %d", cmd.Process.Pid)

	// Wait until automount exits.

	cmd.Wait()

	if !exitedWithSigTerm.Load() && cmd.ProcessState.ExitCode() != 0 {
		log.Fatalf(fmt.Sprintf("automount[%d] has exited unexpectedly: %s", cmd.Process.Pid, cmd.ProcessState))
	}

	log.Infof("automount[%d] has exited: %s", cmd.Process.Pid, cmd.ProcessState)

	return nil
}

func IsAutofs(path string) (bool, error) {
	const fsType = 0x187

	statfs := syscall.Statfs_t{}
	err := syscall.Statfs(path, &statfs)
	if err != nil {
		return false, err
	}

	return statfs.Type == fsType, nil
}
